<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
	
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>1.3</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
  <data name="ArgumentIsNull1" xml:space="preserve">
    <value>The argument '{0}' is null.</value>
  </data>
  <data name="InheritanceMapDuplicated1" xml:space="preserve">
    <value>An inheritance map equal to the '{0}' already exists for a source or a destination type.</value>
  </data>
  <data name="InheritanceMapIsNotForDerivedTypes3" xml:space="preserve">
    <value>A source or derived type in the inheritance map {0} does not inherit or is not equal the corresponding type in the property map {1} in the type map {2}.</value>
  </data>
  <data name="MapperNotFound1" xml:space="preserve">
    <value>A mapper or an unmapper or a map for a type {0} to map or unmap from was not found.</value>
  </data>
  <data name="NotOneLevelMemberExpression" xml:space="preserve">
    <value>Invalid expression. Expression should be an one level member expression only.</value>
  </data>
  <data name="NotSimple1" xml:space="preserve">
    <value>The argument {0} is not simple.</value>
  </data>
  <data name="PropertyMapDuplicated2" xml:space="preserve">
    <value>A property map equal to the '{0}' already exists in the type map {1}.</value>
  </data>
  <data name="PropertyMapHasMapperAndInheritanceMapsOrNothing2" xml:space="preserve">
    <value>The property map {0} in the type map {1} has both mapper and inheritance maps or no one of them.</value>
  </data>
  <data name="PropertyMapIsNotForBothComplexEnumerableOrComplexTypes2" xml:space="preserve">
    <value>The property map {0} of the type map {1} has not both source and destination types complex enumerables or complex types.</value>
  </data>
  <data name="PropertyMapIsNotSupported1" xml:space="preserve">
    <value>The property map {0} is not supported.</value>
  </data>
  <data name="PropertyMapperOrPropertyUnMapperIsNotDefined2" xml:space="preserve">
    <value>One of the mapper or unmapper is not defined in the property map {0} of the type map {1}, while the other one is defined.</value>
  </data>
  <data name="SimpleOrSimpleEnumerable1" xml:space="preserve">
    <value>The argument {0} is simple or is simple enumerable.</value>
  </data>
  <data name="TypeMapDuplicated1" xml:space="preserve">
    <value>A type map equal to the '{0}' already exists.</value>
  </data>
  <data name="TypeMapHasMapperAndMaps1" xml:space="preserve">
    <value>The type map {0} has both mapper and maps.</value>
  </data>
  <data name="TypeMapIsNotForComplexTypes1" xml:space="preserve">
    <value>A source or a destinaton type in the map {0} is not a complex type.</value>
  </data>
  <data name="TypeMapIsNotSupported1" xml:space="preserve">
    <value>The type map {0} is not supported.</value>
  </data>
  <data name="TypeMapperOrTypeUnMapperIsNotDefined1" xml:space="preserve">
    <value>One of the mapper or unmapper is not defined while the other one is defined in the type map {0}.</value>
  </data>
</root>